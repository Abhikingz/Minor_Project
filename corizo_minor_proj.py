# -*- coding: utf-8 -*-
"""Corizo_minor_proj.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PoZt-MorXVyuhUfImp21IwbM_-z1-roU
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import skew, kurtosis, pearsonr, spearmanr

male_file = "/content/sample_data/nhanes_adult_male_bmx_2020.csv"
female_file ="/content/sample_data/nhanes_adult_female_bmx_2020.csv"

male_df = pd.read_csv(male_file, header=None, names=[
    "Weight", "Height", "Arm Length", "Leg Length",
    "Arm Circumference", "Hip Circumference", "Waist Circumference"
])
female_df = pd.read_csv(female_file, header=None, names=[
    "Weight", "Height", "Arm Length", "Leg Length",
    "Arm Circumference", "Hip Circumference", "Waist Circumference"
])

"""# Cleaning and Sorting the Data"""

# Ensure all columns are numeric
male_df = male_df.apply(pd.to_numeric, errors='coerce')
female_df = female_df.apply(pd.to_numeric, errors='coerce')

# Drop rows with NaN values resulting from metadata or invalid entries
male_df = male_df.dropna()
female_df = female_df.dropna()

# Sort the data by weight 
male_df = male_df.sort_values(by='Weight')
female_df = female_df.sort_values(by='Weight')

"""# Shape of the Files"""

print(f"Male dataset shape: {male_df.shape}")
print(f"Female dataset shape: {female_df.shape}")

"""# Comparing weights of male and female using **histograms**"""

# Plotting histograms for weight distributions
plt.figure(figsize=(12, 8))

# Female weights (top)
plt.subplot(2, 1, 1)
plt.hist(female_df["Weight"], bins=30, color='red', alpha=0.7, edgecolor='black')
plt.title('Histogram of Female Weights', fontsize=16, fontweight='bold', color='darkred')
plt.xlabel('Weight (kg)', fontsize=14)
plt.ylabel('Frequency', fontsize=14)
plt.xticks(fontsize=8, rotation=90)
plt.yticks(fontsize=12)
plt.grid(axis='y', color='gray', linestyle='--', linewidth=0.5, alpha=0.7)

# Male weights (bottom)
plt.subplot(2, 1, 2)
plt.hist(male_df["Weight"], bins=30, color='blue', alpha=0.7, edgecolor='black')
plt.title('Histogram of Male Weights', fontsize=16, fontweight='bold', color='darkblue')
plt.xlabel('Weight (kg)', fontsize=14)
plt.ylabel('Frequency', fontsize=14)
plt.xticks(fontsize=8, rotation=90) 
plt.yticks(fontsize=12)
plt.grid(axis='y', color='gray', linestyle='--', linewidth=0.5, alpha=0.7)

# Set identical x-axis limits and improve layout
plt.xlim(40, 140)

# Adjust the layout and spacing between subplots
plt.tight_layout(pad=3.0)
plt.subplots_adjust(hspace=0.5)

# Show plot
plt.show()

print("From above, can say majority of girls weigh between 60-80 kgs while boys weigh between 70-90 kgs.")

"""# Boxplot for female and male weights"""

# Create a box-and-whisker plot
plt.figure(figsize=(10, 6))

# Boxplot for female and male weights
boxprops = dict(facecolor='lightblue', edgecolor='darkblue', linewidth=2)
whiskerprops = dict(color='darkblue', linewidth=2)
medianprops = dict(color='red', linewidth=2)
capprops = dict(color='darkblue', linewidth=2)

plt.boxplot([female_df["Weight"], male_df["Weight"]],
            labels=['Female', 'Male'],
            patch_artist=True,
            boxprops=boxprops,
            whiskerprops=whiskerprops,
            medianprops=medianprops,
            capprops=capprops)

# Title and axis labels with better fonts and sizes
plt.title('Box-and-Whisker Plot of Weights', fontsize=18, fontweight='bold', color='darkred')
plt.ylabel('Weight (kg)', fontsize=14)
plt.xlabel('Gender', fontsize=14)

# Adding gridlines for better readability
plt.grid(True, axis='y', linestyle='--', linewidth=0.7, alpha=0.6)

# Show the plot
plt.tight_layout()
plt.show()

"""# Numerical Aggregates for Weights"""

# Function to compute numerical aggregates
def compute_statistics(data):
    return {
        "Mean": np.mean(data),
        "Median": np.median(data),
        "Variance": np.var(data),
        "Standard Deviation": np.std(data),
        "Skewness": skew(data),
        "Kurtosis": kurtosis(data)
    }

# Compute statistics for both female and male weights
female_stats = compute_statistics(female_df["Weight"])
male_stats = compute_statistics(male_df["Weight"])

# Converting results into DataFrame for better presentation
stats_data = {
    'Statistic': ['Mean', 'Median', 'Variance', 'Standard Deviation', 'Skewness', 'Kurtosis'],
    'Female Weights': [female_stats['Mean'], female_stats['Median'], female_stats['Variance'],
                       female_stats['Standard Deviation'], female_stats['Skewness'], female_stats['Kurtosis']],
    'Male Weights': [male_stats['Mean'], male_stats['Median'], male_stats['Variance'],
                     male_stats['Standard Deviation'], male_stats['Skewness'], male_stats['Kurtosis']]
}

# Create a DataFrame to display the statistics in a table format
stats_df = pd.DataFrame(stats_data)

# Display the table
print("\nNumerical Statistics for Weight Distribution:")
print(stats_df.to_string(index=False))

"""# Adding BMI to the female dataset and standardize the data"""

# Add BMI column to female dataset with clear labeling
female_df["BMI"] = female_df["Weight"] / ((female_df["Height"] / 100) ** 2)

# Show the first few rows with the new BMI column
print("First 5 rows with BMI added:\n")
print(female_df[['Weight', 'Height', 'BMI']].head())  # Display Weight, Height, and BMI for better clarity

#

"""# Standardizing the female dataset"""

#Standardize the female dataset
zfemale = (female_df - female_df.mean()) / female_df.std()

# Display the first 5 rows
print("\nFirst 5 rows of the standardized female data (Z-scores):\n")
print(zfemale.head())

# Display the standardized data in a more polished format with a brief explanation
print("\nExplanation: The Z-scores have been calculated by subtracting the mean and dividing by the standard deviation.")
print("This standardization ensures all variables have a mean of 0 and a standard deviation of 1.")

"""# Scatterplot Matrix and Correlations"""

print("\nCreating scatterplot matrix and computing correlations...")

# Select columns for scatterplot matrix
selected_cols = ["Weight", "Height", "Waist Circumference", "Hip Circumference", "BMI"]

# Create a scatterplot matrix
sns.set(style="whitegrid")
scatter_matrix = sns.pairplot(zfemale[selected_cols],
                              diag_kind="kde",
                              plot_kws={'alpha': 0.7},
                              height=2.5)
scatter_matrix.fig.suptitle("Scatterplot Matrix of Selected Variables", y=1.02, fontsize=16, fontweight='bold')
plt.show()

# Compute Pearson's and Spearman's correlations
pearson_corrs = zfemale[selected_cols].corr(method='pearson')
spearman_corrs = zfemale[selected_cols].corr(method='spearman')

# Display correlation matrices with color formatting
print("\nPearson Correlation Coefficients:")
plt.figure(figsize=(8, 6))
sns.heatmap(pearson_corrs, annot=True, cmap='coolwarm', fmt='.2f', cbar_kws={'label': 'Correlation Coefficient'},
            linewidths=0.5, vmin=-1, vmax=1, annot_kws={"size": 12}, xticklabels=selected_cols, yticklabels=selected_cols)
plt.title("Pearson Correlation Matrix", fontsize=16, fontweight='bold')
plt.show()

print("\nSpearman Correlation Coefficients:")
plt.figure(figsize=(8, 6))
sns.heatmap(spearman_corrs, annot=True, cmap='coolwarm', fmt='.2f', cbar_kws={'label': 'Correlation Coefficient'},
            linewidths=0.5, vmin=-1, vmax=1, annot_kws={"size": 12}, xticklabels=selected_cols, yticklabels=selected_cols)
plt.title("Spearman Correlation Matrix", fontsize=16, fontweight='bold')
plt.show()

# Brief explanation of Pearson vs. Spearman
print("\nExplanation:")
print("Pearson's correlation measures the linear relationship between two variables. It ranges from -1 (perfect negative) to +1 (perfect positive).")
print("Spearman's correlation, a non-parametric measure, assesses how well the relationship between two variables can be described using a monotonic function.")

"""# Compute waist-to-height ratio and waist-to-hip ratio"""

# Compute Waist-to-Height Ratio (WHR) and Waist-to-Hip Ratio (WHR) for both males and females
female_df["Waist-to-Height Ratio"] = female_df["Waist Circumference"] / female_df["Height"]
female_df["Waist-to-Hip Ratio"] = female_df["Waist Circumference"] / female_df["Hip Circumference"]

male_df["Waist-to-Height Ratio"] = male_df["Waist Circumference"] / male_df["Height"]
male_df["Waist-to-Hip Ratio"] = male_df["Waist Circumference"] / male_df["Hip Circumference"]

# Display the first few rows to confirm the new columns
print("\nFirst 5 rows of the female dataset with the new ratios:")
print(female_df[['Height', 'Waist Circumference', 'Hip Circumference', 'Waist-to-Height Ratio', 'Waist-to-Hip Ratio']].head())

print("\nFirst 5 rows of the male dataset with the new ratios:")
print(male_df[['Height', 'Waist Circumference', 'Hip Circumference', 'Waist-to-Height Ratio', 'Waist-to-Hip Ratio']].head())

female_df["Waist-to-Height Ratio"] = female_df["Waist-to-Height Ratio"].round(2)
female_df["Waist-to-Hip Ratio"] = female_df["Waist-to-Hip Ratio"].round(2)

male_df["Waist-to-Height Ratio"] = male_df["Waist-to-Height Ratio"].round(2)
male_df["Waist-to-Hip Ratio"] = male_df["Waist-to-Hip Ratio"].round(2)

# Display the first few rows after rounding the ratios
print("\nFirst 5 rows of the female dataset with rounded ratios:")
print(female_df[['Height', 'Waist Circumference', 'Hip Circumference', 'Waist-to-Height Ratio', 'Waist-to-Hip Ratio']].head())

print("\nFirst 5 rows of the male dataset with rounded ratios:")
print(male_df[['Height', 'Waist Circumference', 'Hip Circumference', 'Waist-to-Height Ratio', 'Waist-to-Hip Ratio']].head())

"""# Box-and-Whisker Plot for Waist-to-Height and Waist-to-Hip Ratios"""

# Prepare the data for the box plot
data = [
    female_df["Waist-to-Height Ratio"], 
    male_df["Waist-to-Height Ratio"],    
    female_df["Waist-to-Hip Ratio"],    
    male_df["Waist-to-Hip Ratio"]      
]

# Set the figure size and box plot attributes
plt.figure(figsize=(10, 6))

# Create the boxplot
plt.boxplot(data,
            labels=["Female Waist-to-Height", "Male Waist-to-Height",
                    "Female Waist-to-Hip", "Male Waist-to-Hip"],
            patch_artist=True,  
            boxprops=dict(facecolor='lightblue', linewidth=1.5),
            whiskerprops=dict(color='darkblue', linewidth=1.5), 
            flierprops=dict(marker='o', markerfacecolor='red', markersize=5),
            medianprops=dict(color='black', linewidth=2))  

# Add titles and labels
plt.title('Comparison of Waist-to-Height and Waist-to-Hip Ratios', fontsize=16, fontweight='bold')
plt.ylabel('Ratio Value', fontsize=14)
plt.grid(True, axis='y', linestyle='--', alpha=0.6)

# Show the plot
plt.tight_layout()
plt.show()

"""# Advantages and Disadvantages of BMI, Waist-to-Height Ratio, and Waist-to-Hip Ratio"""

# Section: Advantages and Disadvantages of BMI, Waist-to-Height Ratio, and Waist-to-Hip Ratio

print("""
Advantages and Disadvantages of BMI, Waist-to-Height Ratio, and Waist-to-Hip Ratio

1. Body Mass Index (BMI):

Advantages:
- Easy to calculate using just weight and height.
- Widely used for general health screening in large populations.

Disadvantages:
- Does not distinguish between muscle and fat.
- Does not account for fat distribution, which is important for assessing health risks.

2. Waist-to-Height Ratio:

Advantages:
- More accurate than BMI in assessing abdominal fat, a key risk factor for health issues.
- Simple to calculate using only waist circumference and height.
- Better predictor of heart disease and type 2 diabetes compared to BMI.

Disadvantages:
- Doesn't account for overall body composition or fitness.
- May not be as accurate for very short or very tall individuals.

3. Waist-to-Hip Ratio:

Advantages:
- Effective for assessing fat distribution, particularly the risk of heart disease and stroke.
- A strong link to health risks such as diabetes and metabolic syndrome.


Disadvantages:
- Requires accurate waist and hip measurements, which can lead to errors.
- Doesn't consider overall body composition or muscle mass.

Summary:
- BMI is simple but limited, particularly for muscular individuals or those with unique body types.
- Waist-to-height ratio offers better insight into abdominal fat and health risks.
- Waist-to-hip ratio is great for fat distribution but requires accuracy in measurement.

""")

"""# Standardised body measurements for the 5 persons"""

# Get the indices of the 5 lowest and 5 highest BMI values
lowest_bmi_indices = zfemale["BMI"].argsort()[:5]  
highest_bmi_indices = zfemale["BMI"].argsort()[-5:] 

# Select the corresponding rows from the zfemale DataFrame
lowest_bmi_data = zfemale.iloc[lowest_bmi_indices]
highest_bmi_data = zfemale.iloc[highest_bmi_indices]

# Combine the data into one DataFrame 
combined_data = pd.concat([lowest_bmi_data, highest_bmi_data])

# Print out the combined data
print("\nStandardized Body Measurements for the 5 Persons with the Lowest and Highest BMI\n")
print("=" * 80)
print("Top 5 persons with the lowest BMI:")
print(lowest_bmi_data[['Weight', 'Height', 'Waist Circumference', 'Hip Circumference', 'BMI']])
print("\nTop 5 persons with the highest BMI:")
print(highest_bmi_data[['Weight', 'Height', 'Waist Circumference', 'Hip Circumference', 'BMI']])
print("=" * 80)

# Explanation of results
print("\nInterpretation:")
print("- The 5 individuals with the lowest BMI are likely to have a lower body mass, possibly reflecting leaner body compositions.")
print("- The 5 individuals with the highest BMI may have higher body mass, which could be due to either fat or muscle mass.")
print("- BMI alone cannot distinguish between muscle and fat mass, so this analysis needs to be complemented with other measures such as waist-to-hip ratio or waist-to-height ratio.")
print("- The standardized values (z-scores) show how far each individual's measurement is from the mean, helping to compare their measurements against the general population.")
